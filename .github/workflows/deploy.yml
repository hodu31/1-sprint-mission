name: Deploy to ECS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      DISCODEIT_STORAGE_ROOT_PATH: /tmp/discodeit/storage

    steps:
      - name: Github Repository 파일 불러오기
        uses: actions/checkout@v4

      - name: JDK 17버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: 테스트 및 빌드하기
        run: ./gradlew clean build

      - name: AWS Resource에 접근할 수 있게 AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: ECR에 로그인하기
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Docker 이미지 생성
        run: docker build -t discodeit .

      - name: Docker 이미지에 Tag 붙이기
        run: docker tag discodeit ${{ steps.login-ecr.outputs.registry }}/discodeit:latest

      - name: ECR에 Docker 이미지 Push하기
        run: docker push ${{ steps.login-ecr.outputs.registry }}/discodeit:latest

      - name: 압축하기
        run: tar -czvf $GITHUB_SHA.tar.gz appspec.yml taskdef.json

      - name: S3에 프로젝트 폴더 업로드하기
        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.tar.gz s3://discodeit-server-image/$GITHUB_SHA.tar.gz

      - name: CodeDeploy를 통해 ECS에 배포 트리거
        run: |
            aws deploy create-deployment \
              --application-name discodeit-CodeDeploy \
              --deployment-group-name Production \
              --s3-location bucket=discodeit-server-image,bundleType=tgz,key=${GITHUB_SHA}.tar.gz \
              --deployment-config-name CodeDeployDefault.AllAtOnce \
              --region ap-northeast-2